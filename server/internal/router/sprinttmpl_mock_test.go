// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package router_test is a generated GoMock package.
package router_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/kulti/task-list/server/internal/models"
	reflect "reflect"
	time "time"
)

// MockSprintTemplateService is a mock of SprintTemplateService interface
type MockSprintTemplateService struct {
	ctrl     *gomock.Controller
	recorder *MockSprintTemplateServiceMockRecorder
}

// MockSprintTemplateServiceMockRecorder is the mock recorder for MockSprintTemplateService
type MockSprintTemplateServiceMockRecorder struct {
	mock *MockSprintTemplateService
}

// NewMockSprintTemplateService creates a new mock instance
func NewMockSprintTemplateService(ctrl *gomock.Controller) *MockSprintTemplateService {
	mock := &MockSprintTemplateService{ctrl: ctrl}
	mock.recorder = &MockSprintTemplateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSprintTemplateService) EXPECT() *MockSprintTemplateServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSprintTemplateService) Get(ctx context.Context, begin, end time.Time) (models.SprintTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, begin, end)
	ret0, _ := ret[0].(models.SprintTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSprintTemplateServiceMockRecorder) Get(ctx, begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSprintTemplateService)(nil).Get), ctx, begin, end)
}

// MocksprintStore is a mock of sprintStore interface
type MocksprintStore struct {
	ctrl     *gomock.Controller
	recorder *MocksprintStoreMockRecorder
}

// MocksprintStoreMockRecorder is the mock recorder for MocksprintStore
type MocksprintStoreMockRecorder struct {
	mock *MocksprintStore
}

// NewMocksprintStore creates a new mock instance
func NewMocksprintStore(ctrl *gomock.Controller) *MocksprintStore {
	mock := &MocksprintStore{ctrl: ctrl}
	mock.recorder = &MocksprintStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksprintStore) EXPECT() *MocksprintStoreMockRecorder {
	return m.recorder
}

// NewSprint mocks base method
func (m *MocksprintStore) NewSprint(ctx context.Context, opts models.SprintOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSprint", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewSprint indicates an expected call of NewSprint
func (mr *MocksprintStoreMockRecorder) NewSprint(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSprint", reflect.TypeOf((*MocksprintStore)(nil).NewSprint), ctx, opts)
}

// CreateTask mocks base method
func (m *MocksprintStore) CreateTask(ctx context.Context, task models.Task, sprintID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task, sprintID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask
func (mr *MocksprintStoreMockRecorder) CreateTask(ctx, task, sprintID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MocksprintStore)(nil).CreateTask), ctx, task, sprintID)
}

// ListTasks mocks base method
func (m *MocksprintStore) ListTasks(ctx context.Context, sprintID string) (models.TaskList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", ctx, sprintID)
	ret0, _ := ret[0].(models.TaskList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks
func (mr *MocksprintStoreMockRecorder) ListTasks(ctx, sprintID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MocksprintStore)(nil).ListTasks), ctx, sprintID)
}
