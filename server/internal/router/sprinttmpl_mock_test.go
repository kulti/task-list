// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package router_test is a generated GoMock package.
package router_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/kulti/task-list/server/internal/models"
	reflect "reflect"
	time "time"
)

// MockSprintTemplateService is a mock of SprintTemplateService interface
type MockSprintTemplateService struct {
	ctrl     *gomock.Controller
	recorder *MockSprintTemplateServiceMockRecorder
}

// MockSprintTemplateServiceMockRecorder is the mock recorder for MockSprintTemplateService
type MockSprintTemplateServiceMockRecorder struct {
	mock *MockSprintTemplateService
}

// NewMockSprintTemplateService creates a new mock instance
func NewMockSprintTemplateService(ctrl *gomock.Controller) *MockSprintTemplateService {
	mock := &MockSprintTemplateService{ctrl: ctrl}
	mock.recorder = &MockSprintTemplateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSprintTemplateService) EXPECT() *MockSprintTemplateServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSprintTemplateService) Get(ctx context.Context, begin, end time.Time) (models.SprintTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, begin, end)
	ret0, _ := ret[0].(models.SprintTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSprintTemplateServiceMockRecorder) Get(ctx, begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSprintTemplateService)(nil).Get), ctx, begin, end)
}
