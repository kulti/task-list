// Code generated by MockGen. DO NOT EDIT.
// Source: router.go

// Package router_test is a generated GoMock package.
package router_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	calservice "github.com/kulti/task-list/server/internal/services/calservice"
	reflect "reflect"
	time "time"
)

// MockCalService is a mock of CalService interface
type MockCalService struct {
	ctrl     *gomock.Controller
	recorder *MockCalServiceMockRecorder
}

// MockCalServiceMockRecorder is the mock recorder for MockCalService
type MockCalServiceMockRecorder struct {
	mock *MockCalService
}

// NewMockCalService creates a new mock instance
func NewMockCalService(ctrl *gomock.Controller) *MockCalService {
	mock := &MockCalService{ctrl: ctrl}
	mock.recorder = &MockCalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalService) EXPECT() *MockCalServiceMockRecorder {
	return m.recorder
}

// GetEvents mocks base method
func (m *MockCalService) GetEvents(ctx context.Context, begin, end time.Time) ([]calservice.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, begin, end)
	ret0, _ := ret[0].([]calservice.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockCalServiceMockRecorder) GetEvents(ctx, begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockCalService)(nil).GetEvents), ctx, begin, end)
}
