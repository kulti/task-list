// Code generated by MockGen. DO NOT EDIT.
// Source: sprint_template.go

// Package sprinttmpl_test is a generated GoMock package.
package sprinttmpl_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/kulti/task-list/server/internal/models"
	calservice "github.com/kulti/task-list/server/internal/services/calservice"
	reflect "reflect"
	time "time"
)

// MockCalService is a mock of CalService interface
type MockCalService struct {
	ctrl     *gomock.Controller
	recorder *MockCalServiceMockRecorder
}

// MockCalServiceMockRecorder is the mock recorder for MockCalService
type MockCalServiceMockRecorder struct {
	mock *MockCalService
}

// NewMockCalService creates a new mock instance
func NewMockCalService(ctrl *gomock.Controller) *MockCalService {
	mock := &MockCalService{ctrl: ctrl}
	mock.recorder = &MockCalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalService) EXPECT() *MockCalServiceMockRecorder {
	return m.recorder
}

// GetEvents mocks base method
func (m *MockCalService) GetEvents(ctx context.Context, begin, end time.Time) ([]calservice.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", ctx, begin, end)
	ret0, _ := ret[0].([]calservice.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents
func (mr *MockCalServiceMockRecorder) GetEvents(ctx, begin, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockCalService)(nil).GetEvents), ctx, begin, end)
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetSprintTemplate mocks base method
func (m *MockStore) GetSprintTemplate(ctx context.Context) (models.SprintTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSprintTemplate", ctx)
	ret0, _ := ret[0].(models.SprintTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSprintTemplate indicates an expected call of GetSprintTemplate
func (mr *MockStoreMockRecorder) GetSprintTemplate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSprintTemplate", reflect.TypeOf((*MockStore)(nil).GetSprintTemplate), ctx)
}

// PopPostponedTasks mocks base method
func (m *MockStore) PopPostponedTasks(ctx context.Context) ([]models.PostponedTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopPostponedTasks", ctx)
	ret0, _ := ret[0].([]models.PostponedTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PopPostponedTasks indicates an expected call of PopPostponedTasks
func (mr *MockStoreMockRecorder) PopPostponedTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopPostponedTasks", reflect.TypeOf((*MockStore)(nil).PopPostponedTasks), ctx)
}

// SetSprintTemplate mocks base method
func (m *MockStore) SetSprintTemplate(ctx context.Context, tmpl models.SprintTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSprintTemplate", ctx, tmpl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSprintTemplate indicates an expected call of SetSprintTemplate
func (mr *MockStoreMockRecorder) SetSprintTemplate(ctx, tmpl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSprintTemplate", reflect.TypeOf((*MockStore)(nil).SetSprintTemplate), ctx, tmpl)
}
