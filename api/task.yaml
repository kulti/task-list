openapi: "3.0.0"
info:
  version: 1.0.0
  title: Task List
servers:
  - url: http://127.0.0.1/api/v1
paths:
  /list/sprint/new:
    post:
      operationId: createTaskList
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SprintOpts"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SprintTemplate"

  /list/{listId}:
    get:
      operationId: getTaskList
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ListId"
      responses:
        "200":
          description: "all tasks in list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskList"

  /list/{listId}/add:
    post:
      operationId: createTask
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ListId"
      requestBody:
        description: task to add
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: "created task"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/RespTask"

  /list/{listId}/delete/{taskId}:
    post:
      operationId: deleteTask
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/ListId"
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK

  /task/{taskId}/todo:
    post:
      operationId: todoTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK

  /task/{taskId}/done:
    post:
      operationId: doneTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description:
            Bad reqest can be returned in cases when done is not possible for task.
            E.g. cannot done task that already canceled.

  /task/{taskId}/cancel:
    post:
      operationId: cancelTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description:
            Bad reqest can be returned in cases when cancel is not possible for task.
            E.g. cannot cancel task that already done.

  /task/{taskId}/postpone:
    post:
      operationId: postponeTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description:
            Bad reqest can be returned in cases when pospone is not possible for task.
            E.g. cannot postpone partially done task.

  /task/{taskId}/update:
    post:
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
      requestBody:
        description: task updates
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/UpdateOptions"

components:
  schemas:
    SprintOpts:
      type: object
      required:
        - begin
        - end
      properties:
        begin:
          type: string
          format: date
        end:
          type: string
          format: date

    Task:
      type: object
      required:
        - text
        - points
      properties:
        text:
          type: string
        points:
          $ref: "#/components/schemas/Points"

    RespTask:
      type: object
      required:
        - id
        - text
        - points
        - burnt
        - state
      properties:
        id:
          type: string
        text:
          type: string
        points:
          $ref: "#/components/schemas/Points"
        burnt:
          $ref: "#/components/schemas/Points"
        state:
          type: string
          enum: ["", todo, done, canceled]

    TaskList:
      type: object
      required:
        - title
        - tasks
      properties:
        title:
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/RespTask"

    ListId:
      type: string
      enum: [sprint, backlog]

    UpdateOptions:
      type: object
      required:
        - text
        - burnt
        - points
      properties:
        text:
          type: string
        burnt:
          $ref: "#/components/schemas/Points"
        points:
          $ref: "#/components/schemas/Points"

    SprintTemplate:
      type: object
      required:
        - tasks
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskTemplate"

    TaskTemplate:
      type: object
      required:
        - id
        - text
        - points
      properties:
        id:
          type: string
        text:
          type: string
        points:
          $ref: "#/components/schemas/Points"

    Points:
      type: integer
      maximum: 32767
